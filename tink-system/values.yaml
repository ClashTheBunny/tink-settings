stack:
  enabled: true
  name: tink-stack
  service:
    enabled: true
    type: LoadBalancer
    annotations:
      metallb.universe.tf/address-pool: bgp
  loadBalancerIP: 192.168.255.255
  selector:
    app: tink-stack
  image: nginx:bookworm
  hook:
    enabled: true
    name: hook-files
    port: 8080
    image: alpine
    downloadsDest: /opt/hook
    persistentStorage: true
    downloads:
      - url: https://github.com/tinkerbell/hook/releases/download/v0.8.0/hook_x86_64.tar.gz
        sha512sum: 498cccba921c019d4526a2a562bd2d9c8efba709ab760fa9d38bd8de1efeefc8e499c9249af9571aa28a1e371e6c928d5175fa70d5d7addcf3dd388caeff1a45
      - url: https://github.com/tinkerbell/hook/releases/download/v0.8.0/hook_aarch64.tar.gz
        sha512sum: 56e3959722c9ae85aec6c214448108e2dc1d581d2c884ca7a23265c1ae28489589481730fbb941fac8239f6222f9b5bb757987a5238f20194e184ae7e83b6a5b
  kubevip:
    enabled: false
  relay: # relay allows us to listen and respond to layer broadcast DHCP requests
    name: dhcp-relay
    enabled: true
    # This image (ghcr.io/jacobweinstock/dhcrelay) is used because `dhcrelay` doesn't respect signals properly when run as PID 1.
    image: ghcr.io/jacobweinstock/dhcrelay
    maxHopCount: 10
    # sourceInterface is the Host/Node interface to use for listening for DHCP broadcast packets.
    sourceInterface: eno1 # TODO(jacobweinstock): investigate autodetecting a default
  os:
    ubuntu:
      - name: focal
        url: "https://cloud-images.ubuntu.com/daily/server/focal/current/focal-server-cloudimg-amd64.img"
    debian:
      - name: bookworm
        url: "https://cloud.debian.org/images/cloud/bookworm/daily/latest/debian-12-generic-amd64-daily.qcow2"
      - name: trixie
        url: "https://cloud.debian.org/images/cloud/trixie/daily/latest/debian-13-generic-amd64-daily.qcow2"
      - name: sid
        url: "https://cloud.debian.org/images/cloud/sid/daily/latest/debian-sid-generic-amd64-daily.qcow2"
  hosts:
    - hostname: super0
      ip: 192.168.32.43
      mac: 00:25:90:a7:f9:9e
      bmc: 192.168.128.150
      bmc_secret: default-sm-bmc-auth
    - hostname: super1
      ip: 192.168.32.44
      mac: 00:25:90:51:d5:0c
      bmc: 192.168.128.166
      bmc_secret: default-sm-bmc-auth
    - hostname:  557yx12.haun.ch
      ip: 192.168.32.45
      mac: ec:f4:bb:c5:1e:fd
      bmc: idrac-557yx12.haun.ch
      bmc_secret: default-dell-bmc-auth
      uefi: true


boots:
  image: quay.io/tinkerbell/boots:v0.9.0
  imagePullPolicy: Always
  tinkWorkerImage: quay.io/tinkerbell/tink-worker:v0.9.0
  trustedProxies:
   - 10.42.0.0/24
   - 10.42.1.0/24
   - 10.42.2.0/24
  # This will be the IP address that machines use to reach Boots (via unicast for DHCP) for netbooting. It should be a unused IP address in your network.
  remoteIp: 192.168.32.233
  # Once the Kubernetes Gateway API is more stable, we will use that and be able to require only a single IP for all Tinkerbell services.
  tinkServer:
    # This should be the same as `stack.loadBalancerIP`.
    ip: 192.168.255.255
  osieBase:
    # This should be the same as `stack.loadBalancerIP`.
    ip: 192.168.255.255

hegel:
  image: quay.io/tinkerbell/hegel:v0
  imagePullPolicy: Always
  deployment:
    port: 12345
  trustedProxies:
   - 10.42.0.0/24
   - 10.42.1.0/24
   - 10.42.2.0/24

rufio:
  image: quay.io/tinkerbell/rufio:v0
  imagePullPolicy: Always

tink:
  controller:
    image: quay.io/tinkerbell/tink-controller:v0.9.0
    imagePullPolicy: Always
  server:
    image: quay.io/tinkerbell/tink:v0.9.0
    imagePullPolicy: Always
    args: []
